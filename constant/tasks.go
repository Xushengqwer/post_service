package constant

// 定时任务调度表达式 (Cron Spec)
const (
	// HotPostsCacheCronSpec 定义了热门帖子相关缓存（包括热榜快照、帖子基本信息Hash、帖子详情）的刷新频率。
	// - 目标: 保持热门内容在缓存中的新鲜度，以加速用户访问。
	// - 场景: 例如，每15分钟或每30分钟执行一次。
	//   - "@every 15m": 每15分钟执行一次。对于大多数社区，这是一个比较均衡的选择。
	//   - "@every 30m": 每30分钟执行一次。如果系统负载较高或热门内容变化不那么快，可以选择此频率。
	//   - "@hourly": 每小时执行一次。
	// - 影响: 此任务会读取 Redis 总排行榜，写入热榜快照，然后根据快照从 MySQL 读取 TopN (由 HotPostsCacheSize 定义)
	//   的帖子基本信息和详情，再写入 Redis 缓存。主要压力点在于 MySQL 的批量查询。
	// - 当前值参考: "@every 15m"
	HotPostsCacheCronSpec = "@every 15m" // 热帖缓存刷新频率

	// SyncViewCountInterval 定义了将 Redis 中的帖子浏览量同步到 MySQL 数据库的频率。
	// - 目标: 将实时的浏览量计数持久化到数据库，用于数据分析或在某些非实时场景展示。
	// - 场景: 此操作对数据库有写入压力，频率不宜过高。
	//   - "0 0 * * *": 每天的零点执行一次（即 @daily）。如果对浏览量持久化的实时性要求不高，此频率可显著降低数据库压力。
	//   - "0 */2 * * *": 每2小时的0分执行一次（例如 00:00, 02:00, 04:00 ...）。
	// - 影响: 此任务会从 Redis SCAN 所有帖子的浏览量计数器，然后批量更新到 MySQL。主要压力点在于 MySQL 的批量写入。
	// - 当前值参考: "0 0 * * *" (每天零点)
	SyncViewCountInterval = "0 0 * * *" // 浏览量同步频率 (修改为每天零点执行)
)

const (
	// HotPostsCacheSize 定义了热门帖子缓存任务处理的帖子数量 (Top N)。
	// 例如，如果设置为 100，则每次任务会刷新浏览量最高的 100 个帖子的缓存。
	// 这个值直接影响从数据库查询的数据量。
	// 参考值: 100 到 500 之间通常是比较合理的范围，具体取决于系统负载和业务需求。
	HotPostsCacheSize = 100 // 示例值：缓存Top100的热门帖子
)
