# docker-compose.yaml
# version: '3.8' # 可以移除 version 行

services:
  # --- MySQL 主库 (Primary) ---
  mysql-primary:
    image: mysql:8.0
    container_name: mysql-primary
    command:
      - --server-id=1
      - --log-bin=mysql-bin
      - --gtid-mode=ON
      - --enforce-gtid-consistency=ON
      - --binlog-format=ROW
      - --read-only=0
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: doer_post_service
      MYSQL_REPL_USER: repl_user
      MYSQL_REPL_PASSWORD: repl_pass
    ports:
      - "3306:3306"
    volumes:
      - mysql_primary_data:/var/lib/mysql
      - ./docker/mysql/init-scripts/primary:/docker-entrypoint-initdb.d
    networks:
      - post_service_net
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-uroot", "-proot"]
      interval: 10s
      timeout: 5s
      retries: 10

  # --- MySQL 从库 (Replica) ---
  mysql-replica:
    image: mysql:8.0
    container_name: mysql-replica
    command:
      - --server-id=2
      - --log-bin=mysql-bin
      - --gtid-mode=ON
      - --enforce-gtid-consistency=ON
      - --binlog-format=ROW
      - --relay-log=mysql-relay-bin
      - --read-only=1
    depends_on:
      mysql-primary:
        condition: service_healthy
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_PRIMARY_HOST: mysql-primary
      MYSQL_REPL_USER: repl_user
      MYSQL_REPL_PASSWORD: repl_pass
    ports:
      - "3307:3306"
    volumes:
      - mysql_replica_data:/var/lib/mysql
      - ./docker/mysql/init-scripts/replica:/docker-entrypoint-initdb.d
    networks:
      - post_service_net

  # --- Redis 服务 ---
  redis:
    image: redis/redis-stack-server:7.2.0-v9
    container_name: post_service_redis_dev
    restart: always
    ports:
      - "6379:6379"
    environment:
      - REDIS_ARGS=--requirepass root
    volumes:
      - redis_data:/data # <-- 推荐使用命名卷
    networks:
      - post_service_net

  # --- Kafka 服务 ---
  kafka:
    image: bitnami/kafka:3.7.0
    container_name: post_service_kafka_dev
    restart: always
    ports:
      - "9092:9092"
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=BROKER://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=BROKER://localhost:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,BROKER:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_KRAFT_CLUSTER_ID=O9p3AqlRR3Cntwv8Jb8j-Q # 保持您的 Cluster ID
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=BROKER
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
      - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=1
      - ALLOW_PLAINTEXT_LISTENER=yes
    volumes:
      - kafka_data:/bitnami/kafka # <-- 推荐使用命名卷
    networks:
      - post_service_net
    # depends_on: [zookeeper] # KRaft 模式不需要

# --- 定义自定义网络 ---
networks:
  post_service_net:
    driver: bridge

# --- 定义数据卷 ---
volumes:
  mysql_primary_data:
  mysql_replica_data:
  redis_data:         # <-- 定义 redis 命名卷
  kafka_data:         # <-- 定义 kafka 命名卷